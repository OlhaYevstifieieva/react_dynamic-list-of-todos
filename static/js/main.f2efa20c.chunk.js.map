{"version":3,"sources":["types/Filter.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","components/functions.ts","index.tsx"],"names":["Filter","TodoList","todos","selectTodo","selectedId","className","map","todo","id","completed","title","type","onClick","TodoFilter","ready","onStatusChange","query","onInputChange","value","onChange","event","target","All","Active","Completed","placeholder","length","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedTodo","onClose","useState","user","setUser","hasLoadingError","setHasLoadingError","waitForUsers","currentTodo","a","userId","userFromServer","useEffect","isLoadingFinished","href","name","App","setTodos","selectedTodoId","setSelectedTodoId","isLoading","setIsLoading","setQuery","filtredByReady","setFiltredByReady","find","fetchTodos","todosFromServer","todoId","findTodo","visibleTodos","filteredTodos","filter","normalizedQuery","toLowerCase","includes","filterTodos","hasLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2efa20c.chunk.js","sourcesContent":["export enum Filter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport className from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectTodo: (selectedTodoId: number) => void;\n  selectedId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectTodo,\n  selectedId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => (\n        <tr\n          data-cy=\"todo\"\n          className=\"\"\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered is-expanded\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={className({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => selectTodo(todo.id)}\n            >\n              <span className=\"icon\">\n                <i className={className('far', {\n                  'fa-eye': selectedId !== todo.id,\n                  'fa-eye-slash': selectedId === todo.id,\n                })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React, { ChangeEvent } from 'react';\nimport { Filter } from '../../types/Filter';\n\ntype Props = {\n  ready: string;\n  onStatusChange: (value: Filter) => void;\n  query: string;\n  onInputChange: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  ready,\n  onStatusChange,\n  query,\n  onInputChange,\n}) => {\n  const changeReady = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    onStatusChange(value as Filter);\n  };\n\n  const inputString = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    onInputChange(value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={ready}\n            onChange={changeReady}\n          >\n            <option value={Filter.All}>All</option>\n            <option value={Filter.Active}>Active</option>\n            <option value={Filter.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={inputString}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              aria-label=\"delete\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onInputChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(0)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo;\n  onClose: (todoId: number) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onClose,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const hideModal = () => {\n    onClose(0);\n  };\n\n  const waitForUsers = async (currentTodo: Todo | null) => {\n    try {\n      if (currentTodo) {\n        const userFromServer = await getUser(currentTodo.userId);\n\n        setUser(userFromServer);\n        setHasLoadingError(false);\n      }\n    } catch {\n      setHasLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    waitForUsers(selectedTodo);\n  }, []);\n\n  const isLoadingFinished = (hasLoadingError && user === null) || user;\n\n  const { id, title, completed } = selectedTodo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {(!isLoadingFinished) ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => hideModal()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {hasLoadingError ? (\n                <p className=\"has-text-danger\">\n                  Can&apos;t load user data from server\n                </p>\n              )\n                : (\n                  <>\n                    {completed\n                      ? (\n                        <strong className=\"has-text-success\">Done</strong>\n                      )\n                      : (\n                        <strong className=\"has-text-danger\">Planned</strong>\n                      )}\n\n                    {' by '}\n\n                    {user ? (\n                      <a href=\"mailto:Sincere@april.biz\">\n                        {user.name}\n                      </a>\n                    )\n                      : (\n                        <span className=\"has-text-danger\">\n                          User not found\n                        </span>\n                      )}\n                  </>\n                )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { Filter } from './types/Filter';\nimport { findTodo, filterTodos } from './components/functions';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState('');\n  const [filtredByReady, setFiltredByReady] = useState<Filter>(Filter.All);\n\n  const selectedTodo = todos.find(todo => todo.id === selectedTodoId);\n\n  const fetchTodos = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n      setIsLoading(false);\n    } catch {\n      setIsLoading(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const selectTodo = findTodo(todos, selectedTodoId);\n  const visibleTodos = filterTodos(todos, filtredByReady, query);\n  const hasLoading = (isLoading && todos.length === 0) || todos.length;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                ready={filtredByReady}\n                onStatusChange={setFiltredByReady}\n                query={query}\n                onInputChange={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {hasLoading\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectTodo={setSelectedTodoId}\n                    selectedId={selectedTodoId}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          selectedTodo={selectTodo!}\n          onClose={setSelectedTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const findTodo = (todos: Todo[], todoId: number) => {\n  return todos.find(todo => todo.id === todoId);\n};\n\nexport const filterTodos = (\n  todos: Todo[], filtredByReady: string, query: string,\n) => {\n  let filteredTodos = todos.filter(todo => {\n    switch (filtredByReady) {\n      case 'active':\n        return todo.completed === false;\n      case 'completed':\n        return todo.completed === true;\n      case 'all':\n      default:\n        return true;\n    }\n  });\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase();\n\n    filteredTodos = filteredTodos\n      .filter(todo => todo.title.toLowerCase().includes(normalizedQuery));\n  }\n\n  return filteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}