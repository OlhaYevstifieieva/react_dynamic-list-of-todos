{"version":3,"sources":["types/Filter.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","components/functions.ts","index.tsx"],"names":["Filter","TodoList","todos","selectTodo","selectedTodoId","className","map","todo","id","title","completed","isSelected","classNames","type","onClick","TodoFilter","ready","onStatusChange","query","onInputChange","value","onChange","event","target","All","Active","Completed","placeholder","length","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","onClose","useState","user","setUser","hasLoading","setHasLoading","hasError","setHasError","waitForUsers","a","userFromServer","useEffect","todoStatusStyle","todoStatusText","href","email","name","App","setTodos","setSelectedTodoId","isLoadingError","setIsLoadingError","setQuery","filtredByReady","setFiltredByReady","selectedTodo","useCallback","fetchTodos","todosFromServer","visibleTodos","useMemo","filteredTodos","filter","normalizedQuery","toLowerCase","includes","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c61981c0.chunk.js","sourcesContent":["export enum Filter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectTodo: (todo: Todo) => void;\n  selectedTodoId: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectTodo,\n  selectedTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => {\n        const { id, title, completed } = todo;\n        const isSelected = id === selectedTodoId?.id;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': isSelected,\n            })}\n            key={id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered is-expanded\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => selectTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': !isSelected,\n                    'fa-eye-slash': isSelected,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import React, { ChangeEvent } from 'react';\nimport { Filter } from '../../types/Filter';\n\ntype Props = {\n  ready: string;\n  onStatusChange: (value: Filter) => void;\n  query: string;\n  onInputChange: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  ready,\n  onStatusChange,\n  query,\n  onInputChange,\n}) => {\n  const changeReady = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    onStatusChange(value as Filter);\n  };\n\n  const inputString = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    onInputChange(value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={ready}\n            onChange={changeReady}\n          >\n            <option value={Filter.All}>All</option>\n            <option value={Filter.Active}>Active</option>\n            <option value={Filter.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={inputString}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {!!query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"delete\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onInputChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todo: Todo;\n  onClose: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  onClose,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [hasLoading, setHasLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  const waitForUsers = async () => {\n    try {\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n      setHasLoading(true);\n      setHasError(false);\n    } catch {\n      setUser(null);\n      setHasLoading(false);\n      setHasError(true);\n    }\n  };\n\n  useEffect(() => {\n    waitForUsers();\n  }, []);\n\n  const todoStatusStyle = completed ? 'success' : 'danger';\n  const todoStatusText = completed ? 'Done' : 'Planned';\n\n  if (hasError) {\n    return (\n      <span>\n        Todos not found\n      </span>\n    );\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {(hasLoading)\n        ? (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                aria-label=\"button close\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong className={`has-text-${todoStatusStyle}`}>\n                  {todoStatusText}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        ) : (\n          <Loader />\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { Filter } from './types/Filter';\nimport { filterTodos } from './components/functions';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState<Todo | null>(null);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filtredByReady, setFiltredByReady] = useState<Filter>(Filter.All);\n\n  const selectedTodo = useCallback((todo: Todo) => {\n    setSelectedTodoId(todo);\n  }, []);\n\n  const fetchTodos = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n      setIsLoadingError(false);\n    } catch {\n      setIsLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return filterTodos(todos, filtredByReady, query);\n  }, [todos, query, filtredByReady]);\n\n  const selectTodo = useCallback((todo: Todo) => {\n    setSelectedTodoId(todo);\n  }, []);\n\n  const onClose = useCallback(() => {\n    setSelectedTodoId(null);\n  }, [selectedTodo]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                ready={filtredByReady}\n                onStatusChange={setFiltredByReady}\n                query={query}\n                onInputChange={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length ? (\n                <TodoList\n                  todos={visibleTodos}\n                  selectTodo={selectTodo}\n                  selectedTodoId={selectedTodoId}\n                />\n              ) : (\n                <>\n                  {isLoadingError && <span> No todos from server</span>}\n                  <Loader />\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId && (\n        <TodoModal\n          todo={selectedTodoId}\n          onClose={onClose}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { Filter } from '../types/Filter';\n\nexport const filterTodos = (\n  todos: Todo[],\n  filtredByReady: Filter,\n  query: string,\n) => {\n  let filteredTodos = todos.filter(todo => {\n    switch (filtredByReady) {\n      case Filter.Active:\n        return todo.completed === false;\n      case Filter.Completed:\n        return todo.completed === true;\n      case Filter.All:\n      default:\n        return true;\n    }\n  });\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase();\n\n    filteredTodos = filteredTodos\n      .filter(todo => todo.title.toLowerCase().includes(normalizedQuery));\n  }\n\n  return filteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}